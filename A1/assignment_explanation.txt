REQUIREMENTS:
  In this assignment, we are required to make a versioning enabled S3 bucket which stores all the terraform state files for remote access. We also have to create a DynamoDB Table for state-lock and a backend file for S3 and DynamoDB use configuation.

PROCEDURE:
  We first create the S3 bucket and the DynamoDB Table with the reuired settings in a main.tf file. After that, we create a backend.tf file for enabling the use of S3 and DynamoDb.  

    CODE:
      provider "aws" {
        region = "us-west-2" 
      }
      
      resource "aws_s3_bucket" "terraform_state" {
        bucket = "terraform-a1-bucket" 
      }
      
      resource "aws_s3_bucket_versioning" "terraform_state_versioning" {
        bucket = aws_s3_bucket.terraform_state.id
        versioning_configuration {
          status = "Enabled"
        }
      }
      
      resource "aws_dynamodb_table" "terraform_state_lock" {
        name           = "terraform-a1-state-lock"
        billing_mode   = "PAY_PER_REQUEST"
        hash_key       = "LockID"
      
        attribute {
          name = "LockID"
          type = "S"
        }
      }
    
      EXPLANATION:
        Provider block is specifying the provider and it's region for our terraform configuration.
        Bucket resource block creates an aws S3 bucket resource named terraform-a1-bucket
        There is another resource block which provisions a state-versioning configuration for the above s3 bucket
        Another resource block is written for aws dynamoDB resource with name terraform-a1-state-lock and the cost billing mode set ad pay per request which specifies that aws will only charge us when a request is made to the dynamoDB resource.     
        Hash key referes to the primary key in the db. LockID is the primary key in state lock table.
        The attribute block in dynamoDB resource definition is the schema for the dynamoDB
    
        WHAT EXACTLY STATE LOCKING MEANS AND WHY USE DYNAMODB TO ACHIEVE SO?
          State lock referes to the restriction of operation on statefile by users or processes. This enables only one process or user to change and operate into the remote tf state file at one time.
          When the state file is in use by a process, terraform writes a lockID related to the process into the dynamoDB table and waits for the process to complete to release the LockID. 
          If another process tries to access the statefile, terraform looks if there is any LockID in the table. 
          If so than terraform waits for LockID to be released and than give the process access to the statefile. 

  As we have created the resources, we now need a configuration file to connect these resources to achieve statelocking for remotely stored terraform state files. We create a new terraform file named backend.tf in the same directory as main.tf file.

    CODE:
      terraform {
        backend "s3" {
          bucket         = "terraform-a1-bucket" 
          key            = "tfstates/terraform.tfstate"          
          region         = "us-west-2"                          
          encrypt        = true                                 
          dynamodb_table = "terraform-a1-state-lock"               
        }
      }
  
    EXPLANATION:
      Bucket name represents our S3 bucket
      The key variable is the bucket path to store the terraform statefile
      Region variable specifies the region for the backend configuration
      Encryption makes sure that the credentials inside the terraform statefile are encrypted 
      DynamoDB variable is the DynamoDB name form other file which stores LockID for state locks

  The configuration si done however, if anyone wants to see the statefile, it won't be visible. TO make the statefile visible to the public, go to the AWS console and go to the terraform-a1-bucket page. 
  Go to permissions and disable "block access for public"
  Now go to bucker policies and add a new policy as per your needs.
  Let's use a read only policy for public for now which is 
    {
      "Version": "2012-10-17",
      "Statement": [
          {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::terraform-a1-bucket/*"
          }]
    }
  However, we have blocked the access since we don't want anyone looking into our infrastrucure configurations. 
