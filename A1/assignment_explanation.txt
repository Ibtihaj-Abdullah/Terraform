REQUIREMENTS:
  In this assignment, we are required to make a versioning enabled S3 bucket which stores all the terraform state files for remote access. We also have to create a DynamoDB Table for state-lock and a backend file for S3 and DynamoDB use configuation.

PROCEDURE:
  We first create the S3 bucket and the DynamoDB Table with the reuired settings in a main.tf file. After that, we create a backend.tf file for enabling the use of S3 and DynamoDb.  

  CODE:
    provider "aws" {
      region = "us-west-2" 
    }
    
    resource "aws_s3_bucket" "terraform_state" {
      bucket = "terraform-a1-bucket" 
    }
    
    resource "aws_s3_bucket_versioning" "terraform_state_versioning" {
      bucket = aws_s3_bucket.terraform_state.id
      versioning_configuration {
        status = "Enabled"
      }
    }
    
    resource "aws_dynamodb_table" "terraform_state_lock" {
      name           = "terraform-a1-state-lock"
      billing_mode   = "PAY_PER_REQUEST"
      hash_key       = "LockID"
    
      attribute {
        name = "LockID"
        type = "S"
      }
    }

  EXPLANATION:
    Line 8 provider block is specifying the provider and it's region for our terraform configuration.
    Line 12 block creates an aws S3 bucket resource named terraform-a1-bucket
    Line 16 creates an aws dynamoDB resource with name terraform-a1-state-lock and the cost billing mode set ad pay per request which specifies that aws will only charge us when a request is made to the dynamoDB resource.
    State lock referes to the restriction of opeartion on statefile by users or processes. This enables only one process or user to change and operate into the remote tf state file at one time.     
    Hash key referes to the primary key in the db. LockID is the primary key in state lock table.
    The attribute block in dynamoDB resource definition is the schema for the dynamoDB
    
